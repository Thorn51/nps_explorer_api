const express = require("express");
const path = require("path");
const logger = require("../logger");
const FavoriteParksService = require("./favoriteParks-service");
const { requireAuth } = require("../middleware/jwt-auth");

const favoriteParksRouter = express.Router();
const bodyParser = express.json();

favoriteParksRouter
  .route("/")
  .all(requireAuth)
  // return all favorites
  .get((req, res, next) => {
    FavoriteParksService.getAllFavorites(req.app.get("db"))
      .then(favorites => {
        res
          .status(200)
          .json(favorites.map(FavoriteParksService.serializeFavorite));
        logger.info("GET /api/favorites -> All favorites returned");
      })
      .catch(next);
  })
  // Create new favorite and add to favorite_parks table
  .post(bodyParser, (req, res, next) => {
    const { parkCode, favorite = false } = req.body;
    const newFavorite = { park_code: parkCode, favorite: favorite };

    // Validation skipped -> all submitted data generated by client, not user

    // Get id from JWT
    newFavorite.user_account = req.user.id;

    FavoriteParksService.insertFavorite(req.app.get("db"), newFavorite)
      .then(favorite => {
        logger.info(
          `POST /api/favorites -> Favorite id ${favorite.id} created`
        );
        res
          .status(201)
          .location(path.posix.join(req.originalUrl, `/${favorite.id}`))
          .json(FavoriteParksService.serializeFavorite(favorite));
      })
      .catch(next);
  });

favoriteParksRouter
  .route("/:favorite_id")
  .all(requireAuth)
  // Perform validation for all
  .all((req, res, next) => {
    const { favorite_id } = req.params;
    FavoriteParksService.getById(req.app.get("db"), favorite_id)
      .then(favorite => {
        if (!favorite) {
          logger.error(
            `GET /api/favorites/:favorite_id -> Favorite id ${favorite_id} doesn't exist`
          );
          return res.status(404).json({ error: `Favorite doesn't exist` });
        }
        res.favorite = favorite;
        next();
      })
      .catch(next);
  })
  // Return the favorite by its id
  .get((req, res) => {
    res.status(200).json(FavoriteParksService.serializeFavorite(res.favorite));
    logger.info(
      `GET /api/favorites/:favorite_id -> Favorite id ${res.favorite.id} returned`
    );
  })
  // Remove favorite park from table -> Not wired up in client
  .delete((req, res, next) => {
    const { favorite_id } = req.params;

    FavoriteParksService.deleteFavorite(req.app.get("db"), favorite_id)
      .then(() => {
        res.status(204).end();
        logger.info(
          `DELETE /api/favorites/:favorite_id -> Favorite id ${favorite_id} removed`
        );
      })
      .catch(next);
  })
  // Change the boolean value of favorite
  .patch(bodyParser, (req, res, next) => {
    const { favorite_id } = req.params;
    const { favorite } = req.body;
    const updateFavorite = { favorite };

    if (favorite === undefined) {
      logger.error(
        `PATCH /api/favorites/:favorite_id -> Missing 'favorite' in request body`
      );
      return res
        .status(400)
        .json({ error: `Request body must contain 'favorite'` });
    }

    FavoriteParksService.editFavorite(
      req.app.get("db"),
      favorite_id,
      updateFavorite
    )
      .then(() => {
        res.status(200).json({ info: "Request completed" });
        logger.info(
          `PATCH /api/favorites/:favorite_id -> favorite id ${favorite_id} edited`
        );
      })
      .catch(next);
  });

module.exports = favoriteParksRouter;
